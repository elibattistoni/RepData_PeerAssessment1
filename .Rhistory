g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+function_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(color = aes(color=drv), size=2, alpha=1/2)+ geom_smooth(size=4,linetype=3,ethod="lm",se=FALSE)
g+geom_point(color = aes(color=drv), size=2, alpha=1/2)+ geom_smooth(size=4,linetype=3, method="lm",se=FALSE)
g+geom_point(size=2, alpha=1/2, aes(color=drv))+ geom_smooth(size=4,linetype=3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method="lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method="lm", se = FALSE, size = 2, color = "black") + labs(x="Displacement", y = "Highway Mileage", title = "Swirl Rules!")
library(swirl)
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut
)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color=cut())
qplot(price, data = diamonds, geom = "density", color=cut)
qplot(carat,price,data=dataset)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, shape = cut)
qplot(carat,price,data=diamonds, color = cut)
qplot(carat,price,data=diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth,price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat,price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?plom
?splom
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(votes, rating, data = movies)
library(ggplot2movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
library(swirl)
swirl()
dist(dataFrame)
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
library(swril)
library(swirl)
swirl()
cmat
points(cs,cy, col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
points(cx,cy, col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
library(swirl)
swirl()
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%matv
matu%*%t
matu %*% t
matu %*% matv
matu %*% diag %*% matv
matu %*% diag
matu %*% diag %*% t(matv)
svd(scale(mat)
)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$v
svd2$d
dim(faceData)
a1 <- svd1$u[,1] %*% svd1$d[1]
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1 <- svd1$v * (svd1$u[,1] %*% svd1$d[1])
a1 <- svd1$v %*% svd1$u[,1] %*% svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c([10:12],maxCon)])
mdist <- dist(c(sub1[10:12],maxCon))
mdist <- dist(sub1[,c([,10:12],maxCon)])
mdist <- dist(c(sub1[,10:12],maxCon))
maxCon
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdon,1:12], pch = 19, ylab = "Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, pm0$State.Code==36 & pm0$county.site %in% both)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(median(x0sub,na.rm=TRUE), lwd=2)
abline(median(x0sub,na.rm=TRUE), lwd=2)
?abline
abline(h = median(x0sub,na.rm=TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub,na.rm=TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean = mn0)
d1 <- data.frame(state=names(mn1), mean = mn1)
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg, points(rep(2,52),mrg[,3]))
segments(rep(1,52),rep(2,52))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
interval_data <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval)]
ggplot(interval_data, aes(x = interval , y = steps)) + geom_line(color="black", size = 2) + labs(title = "Average Daily Steps", x = "Interval", y = "Average Daily Steps")
setwd("~/Documents/GitHub/RepData_PeerAssessment1")
library(data.table)
library(ggplot2)
activity_data <- fread(input = "activity.csv")
daily_steps <- activity_data[, c(lapply(.SD, sum, na.rm = FALSE)), .SDcols = c("steps"), by = .(date)]
head(daily_steps)
ggplot(daily_steps, aes(x = steps)) +
geom_histogram(fill = "black", binwidth = 500) +
labs(title = "Daily Steps", x = "Steps", y = "Frequency")
# 1.3. mean and median of the total number of steps taken per day
daily_steps[, .(steps_median = median(steps, na.rm = TRUE), steps_mean = mean(steps, na.rm = TRUE))]
interval_data <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval)]
ggplot(interval_data, aes(x = interval , y = steps)) + geom_line(color="black", size = 2) + labs(title = "Average Daily Steps", x = "Interval", y = "Average Daily Steps")
ggplot(interval_data, aes(x = interval , y = steps)) + geom_line(color="black", size = 0.5) + labs(title = "Average Daily Steps", x = "Interval", y = "Average Daily Steps")
head(interval_data)
interval_data[max_steps == max(steps), .(max_interval = interval)]
interval_data[steps == max(steps), .(max_interval = interval)]
interval_data[steps == max(steps), .(IntervalWithMaxSteps = interval)]
nrow(activity_data[is.na(steps),])
activity_data[is.na(steps), .N ]
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
head(activity_data)
fwrite(x = activity_data, file = "clean_data.csv", quote = FALSE)
total_steps <- activity_data[, c(lapply(.SD, sum)), .SDcols = c("steps"), by = .(date)]
head(total_steps)
total_steps[, .(mean_steps = mean(steps), median_steps = median(steps))]
ggplot(total_steps, aes(x = steps)) + geom_histogram(fill = "black", binwidth = 500) + labs(title = "Daily Steps", x = "Steps", y = "Frequency")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, `Day of Week`:= weekdays(x = date)]
activity_data[grepl(pattern = "Saturday|Sunday", x = `Day of Week`), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = `Day of Week`), "Weekday vs. Weekend"] <- "weekday"
activity_data[, `weekday or weekend` := as.factor(`weekday or weekend`)]
head(activity_data)
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `weekday or weekend`)) +
geom_line() +
labs(title = "Average Daily Steps - Weekday vs. Weekend", x = "Interval", y = "Number of Steps") +
facet_wrap(~`weekday or weekend` , ncol = 1, nrow=2)
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
interval_data_2 <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval, `weekday or weekend`)]
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `weekday or weekend`)) +
geom_line() +
labs(title = "Average Daily Steps - Weekday vs. Weekend", x = "Interval", y = "Number of Steps") +
facet_wrap(~`weekday or weekend` , ncol = 1, nrow=2)
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
interval_data_2 <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval, `weekday or weekend`)]
activity_data[, "Day of Week":= weekdays(x = date)]
activity_data <- fread(input = "activity.csv")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, "Day" := weekdays(x = date)]
activity_data[grepl(pattern = "Saturday|Sunday", x = "Day"), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = "Day"), "Weekday vs. Weekend"] <- "weekday"
activity_data[, "weekday or weekend" := as.factor("weekday or weekend")]
head(activity_data)
?grepl
activity_data <- fread(input = "activity.csv")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, "Day" := weekdays(x = date)]
head(activity_data)
?pattern
"Saturday|Sunday"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = "Day"), "Weekday vs. Weekend"] <- "weekday"
head(activity_data)
grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = "Day")
grepl(pattern = 'Monday|Tuesday|Wednesday|Thursday|Friday', x = "Day")
grepl(pattern = `Monday|Tuesday|Wednesday|Thursday|Friday`, x = "Day")
activity_data[grepl(pattern = `Monday|Tuesday|Wednesday|Thursday|Friday`, x = "Day"), "Weekday vs. Weekend"] <- "weekday"
activity_data[grepl(pattern = "Saturday|Sunday", x = `Day`), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = `Day`), "Weekday vs. Weekend"] <- "weekday"
head(activity_data)
activity_data[, "weekday or weekend" := as.factor("weekday or weekend")]
head(activity_data)
activity_data <- fread(input = "activity.csv")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, "Day" := weekdays(x = date)]
activity_data[grepl(pattern = "Saturday|Sunday", x = `Day`), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = `Day`), "Weekday vs. Weekend"] <- "weekday"
activity_data[, `weekday or weekend` := as.factor("weekday or weekend")]
head(activity_data)
activity_data <- fread(input = "activity.csv")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, "Day" := weekdays(x = date)]
activity_data[grepl(pattern = "Saturday|Sunday", x = `Day`), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = `Day`), "Weekday vs. Weekend"] <- "weekday"
activity_data[, `weekday or weekend` := as.factor(`weekday or weekend`)]
head(activity_data)
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
interval_data_2 <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval, `weekday or weekend`)]
activity_data <- fread(input = "activity.csv")
activity_data[, date := as.POSIXct(date, format = "%Y-%m-%d")]
activity_data[, "Day" := weekdays(x = date)]
activity_data[grepl(pattern = "Saturday|Sunday", x = `Day`), "Weekday vs. Weekend"] <- "weekend"
activity_data[grepl(pattern = "Monday|Tuesday|Wednesday|Thursday|Friday", x = `Day`), "Weekday vs. Weekend"] <- "weekday"
activity_data[, `Weekday vs. Weekend` := as.factor(`Weekday vs. Weekend`)]
head(activity_data)
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
interval_data_2 <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval, "Weekday vs. Weekend")]
interval_data_2 <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval, `Weekday vs. Weekend`)]
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `Weekday vs. Weekend`)) +
geom_line() +
labs(title = "Average Daily Steps - Weekday vs. Weekend", x = "Interval", y = "Number of Steps") +
facet_wrap(~`weekday or weekend` , ncol = 1, nrow=2)
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `Weekday vs. Weekend`))
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `Weekday vs. Weekend`)) + geom_line() +
labs(title = "Average Daily Steps - Weekday vs. Weekend", x = "Interval", y = "Number of Steps") +
facet_wrap(~`Weekday vs. Weekend` , ncol = 1, nrow = 2)
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `Weekday vs. Weekend`)) + geom_line() +
labs(title = "Average Daily Steps", x = "Interval", y = "Number of Steps") +
facet_wrap(~`Weekday vs. Weekend` , ncol = 1, nrow = 2)
ggplot(interval_data_2 , aes(x = interval , y = steps, color = `Weekday vs. Weekend`)) + geom_line() +
labs(title = "Average Daily Steps", x = "Interval", y = "Number of Steps") +
facet_wrap(~`Weekday vs. Weekend` , ncol = 2, nrow = 1)
setwd("~/Documents/GitHub/RepData_PeerAssessment1")
unzip(zipfile = "activity.zip")
library(data.table)
library(ggplot2)
# read data
activity_data <- fread(input = "activity.csv")
# 1. What is the mean total number of steps taken per day? (ignore NA)
# 1.1. total number of steps taken per day
daily_steps <- activity_data[, c(lapply(.SD, sum, na.rm = FALSE)), .SDcols = c("steps"), by = .(date)]
head(daily_steps)
# 1.2. histogram of the total number of steps taken each day
ggplot(daily_steps, aes(x = steps)) +
geom_histogram(fill = "black", binwidth = 500) +
labs(title = "Daily Steps", x = "Steps", y = "Frequency")
# 1.3. mean and median of the total number of steps taken per day
daily_steps[, .(steps_median = median(steps, na.rm = TRUE), steps_mean = mean(steps, na.rm = TRUE))]
# 2. What is the average daily activity pattern?
# 2.1. Time-series plot of the 5-minute interval (x-axis) and the average number of steps taken
# averaged across all days
interval_data <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval)]
ggplot(interval_data, aes(x = interval , y = steps)) + geom_line(color="black", size = 0.5) + labs(title = "Average Daily Steps", x = "Interval", y = "Average Daily Steps")
# 2.2. Which 5-minute interval, on average across all the days in the dataset, contains the
# maximum number of steps?
interval_data[steps == max(steps), .(IntervalWithMaxSteps = interval)]
# 3.1. Calculate and report the total number of missing values in the dataset
activity_data[is.na(steps), .N ]
# alternative solution
nrow(activity_data[is.na(steps),])
# 3.2. Devise a strategy for filling in all of the missing values in the dataset.
# Fill missing values with the mean of the dataset.
activity_data[is.na(steps), "steps"] <- activity_data[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps")]
# 3.3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
fwrite(x = activity_data, file = "clean_data.csv", quote = FALSE)
total_steps <- activity_data[, c(lapply(.SD, sum)), .SDcols = c("steps"), by = .(date)]
# mean and median total number of steps taken per day
total_steps[, .(mean_steps = mean(steps), median_steps = median(steps))]
ggplot(total_steps, aes(x = steps)) + geom_histogram(fill = "black", binwidth = 500) + labs(title = "Daily Steps", x = "Steps", y = "Frequency")
